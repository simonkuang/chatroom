# OpenResty 配置文件 - 聊天室应用
# 包含 Lua 脚本增强和 WebSocket 优化

# 在 http 块中添加以下配置
lua_shared_dict chatroom_stats 10m;
lua_shared_dict chatroom_limits 10m;

upstream chatroom_backend {
    server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# WebSocket 连接映射表
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 443 ssl http2;
    server_name chat.tianwen.tech;

    # SSL 配置
    ssl_certificate /path/to/your/certificate.crt;
    ssl_certificate_key /path/to/your/private.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 日志配置
    access_log /var/log/openresty/chatroom_access.log;
    error_log /var/log/openresty/chatroom_error.log;

    # Lua 初始化
    init_by_lua_block {
        -- 初始化统计信息
        local stats = ngx.shared.chatroom_stats
        stats:set("ws_connections", 0)
        stats:set("total_requests", 0)
    }

    # WebSocket 连接处理
    location /ws {
        # 连接限制检查
        access_by_lua_block {
            local stats = ngx.shared.chatroom_stats
            local current_connections = stats:get("ws_connections") or 0
            local max_connections = 1000  -- 最大连接数限制
            
            if current_connections >= max_connections then
                ngx.log(ngx.ERR, "WebSocket connection limit reached: ", current_connections)
                ngx.status = 503
                ngx.say("Service temporarily unavailable - too many connections")
                ngx.exit(503)
            end
            
            -- 增加连接计数
            stats:incr("ws_connections", 1)
            stats:incr("total_requests", 1)
        }

        # WebSocket 代理配置
        proxy_pass http://chatroom_backend;
        proxy_http_version 1.1;
        
        # WebSocket 升级头部
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # 标准代理头部
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket 特定配置
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # 超时配置 - 关键设置
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 3600s;  # 1小时超时，适合长连接
        
        # 缓冲配置 - 对 WebSocket 很重要
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_buffer_size 4k;
        
        # 连接断开时的清理
        log_by_lua_block {
            local stats = ngx.shared.chatroom_stats
            stats:incr("ws_connections", -1)
        }
    }

    # API 接口处理
    location /api/ {
        # 速率限制
        access_by_lua_block {
            local limits = ngx.shared.chatroom_limits
            local key = ngx.var.remote_addr
            local current_time = ngx.time()
            local window = 60  -- 1分钟窗口
            local max_requests = 100  -- 每分钟最多100个请求
            
            local requests = limits:get(key) or 0
            local window_key = key .. ":" .. math.floor(current_time / window)
            local window_requests = limits:get(window_key) or 0
            
            if window_requests >= max_requests then
                ngx.log(ngx.WARN, "Rate limit exceeded for IP: ", key)
                ngx.status = 429
                ngx.header["Retry-After"] = window
                ngx.say("Rate limit exceeded")
                ngx.exit(429)
            end
            
            limits:set(window_key, window_requests + 1, window)
        }

        proxy_pass http://chatroom_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API 超时配置
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # 错误处理
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 10s;
    }

    # 静态文件处理
    location /static/ {
        proxy_pass http://chatroom_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        
        # 静态文件缓存
        expires 1h;
        add_header Cache-Control "public, immutable";
        
        # 压缩
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types
            text/css
            text/javascript
            application/javascript
            application/json
            text/plain;
    }

    # 主页处理
    location / {
        proxy_pass http://chatroom_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 超时配置
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
    }

    # 统计信息端点
    location /stats {
        access_log off;
        content_by_lua_block {
            local stats = ngx.shared.chatroom_stats
            local ws_connections = stats:get("ws_connections") or 0
            local total_requests = stats:get("total_requests") or 0
            
            ngx.header.content_type = "application/json"
            ngx.say('{"ws_connections":', ws_connections, ',"total_requests":', total_requests, '}')
        }
    }

    # 健康检查
    location /health {
        access_log off;
        content_by_lua_block {
            -- 检查后端健康状态
            local http = require "resty.http"
            local httpc = http.new()
            httpc:set_timeout(1000)  -- 1秒超时
            
            local res, err = httpc:request_uri("http://127.0.0.1:8080/", {
                method = "GET",
                headers = {
                    ["User-Agent"] = "OpenResty-Health-Check"
                }
            })
            
            if not res or res.status ~= 200 then
                ngx.status = 503
                ngx.say("Backend unhealthy")
                return
            end
            
            ngx.status = 200
            ngx.say("OK")
        }
    }

    # WebSocket 连接测试端点
    location /ws-test {
        access_log off;
        content_by_lua_block {
            ngx.header.content_type = "text/html"
            ngx.say([[
<!DOCTYPE html>
<html>
<head>
    <title>WebSocket Test</title>
</head>
<body>
    <h1>WebSocket Connection Test</h1>
    <div id="status">Connecting...</div>
    <script>
        const ws = new WebSocket('wss://chat.tianwen.tech/ws');
        const status = document.getElementById('status');
        
        ws.onopen = function() {
            status.textContent = 'Connected successfully!';
            status.style.color = 'green';
        };
        
        ws.onerror = function(error) {
            status.textContent = 'Connection failed: ' + error;
            status.style.color = 'red';
        };
        
        ws.onclose = function() {
            status.textContent = 'Connection closed';
            status.style.color = 'orange';
        };
    </script>
</body>
</html>
            ]])
        }
    }
}

# HTTP 重定向
server {
    listen 80;
    server_name chat.tianwen.tech;
    return 301 https://$server_name$request_uri;
}